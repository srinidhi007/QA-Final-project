name: Azure Pipelines

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '97f0030f-acb4-493d-9d89-534a7c4ce538'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  # Environment name
  environmentName: 'test'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Python version: 3.7
  pythonVersion: '3.7'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'udacity-3'
        backendAzureRmStorageAccountName: 'sristorageaccountqa'
        backendAzureRmContainerName: 'container-qa'
        backendAzureRmKey: 'test.terraform.tfstate'
    
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile:
    
    # Run Terraform Apply
    #- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    #  displayName: Terraform apply
    #  inputs:
    #    provider: 'azurerm'
    #    command: 'apply'
    #    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #    environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
    
    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    - task: TerraformTaskV3@3
      displayName: Terraform destroy
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    #- task: CmdLine@2
    #  displayName: Install Newman
    #  inputs:
    #    script: 'sudo npm install -g newman'
    #    workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    #- task: CmdLine@2
    #  displayName: Run Data Validation Tests
    #  continueOnError: true
    #  inputs:
    #    script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
    #    workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
    #- task: CmdLine@2
    #  displayName: Run Regression Tests
    #  continueOnError: true
    #  inputs:
    #    script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
    #    workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    #- task: PublishTestResults@2
    #  inputs:
    #    testResultsFormat: 'JUnit'
    #    testResultsFiles: '**/TEST-*.xml'
    #    searchFolder: '$(System.DefaultWorkingDirectory)' # ToDo
    #    mergeTestResults: true
    #    testRunTitle: 'Postman Test Run' # ToDo